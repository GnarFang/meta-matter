From 2fc74fa0ee977b1faecdcf663fca8486d65db285 Mon Sep 17 00:00:00 2001
From: Haoran Wang <elven.wang@nxp.com>
Date: Fri, 2 Dec 2022 11:07:58 +0000
Subject: [PATCH] Add Network Commissioning cluster setup for bridge app Linux

Based on change #16222, the bridge app on Linux need support WiFi
network for commissioning.

Signed-off-by: Haoran Wang <elven.wang@nxp.com>
---
 examples/bridge-app/linux/main.cpp | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/examples/bridge-app/linux/main.cpp b/examples/bridge-app/linux/main.cpp
index ee545d5619..6c65193b45 100644
--- a/examples/bridge-app/linux/main.cpp
+++ b/examples/bridge-app/linux/main.cpp
@@ -25,6 +25,7 @@
 #include <app-common/zap-generated/attribute-id.h>
 #include <app-common/zap-generated/cluster-id.h>
 #include <app/ConcreteAttributePath.h>
+#include <app/clusters/network-commissioning/network-commissioning.h>
 #include <app/EventLogging.h>
 #include <app/chip-zcl-zpro-codec.h>
 #include <app/reporting/reporting.h>
@@ -40,6 +41,7 @@
 #include <platform/CommissionableDataProvider.h>
 #include <setup_payload/QRCodeSetupPayloadGenerator.h>
 #include <setup_payload/SetupPayload.h>
+#include <platform/Linux/NetworkCommissioningDriver.h>
 
 #include <pthread.h>
 #include <sys/ioctl.h>
@@ -54,6 +56,7 @@
 #include <vector>
 
 using namespace chip;
+using namespace chip::app;
 using namespace chip::Credentials;
 using namespace chip::Inet;
 using namespace chip::Transport;
@@ -71,6 +74,10 @@ EndpointId gFirstDynamicEndpointId;
 Device * gDevices[CHIP_DEVICE_CONFIG_DYNAMIC_ENDPOINT_COUNT];
 std::vector<Room *> gRooms;
 std::vector<Action *> gActions;
+#if CHIP_DEVICE_CONFIG_ENABLE_WPA
+DeviceLayer::NetworkCommissioning::LinuxWiFiDriver sLinuxWiFiDriver;
+Clusters::NetworkCommissioning::Instance sWiFiNetworkCommissioningInstance(0, &sLinuxWiFiDriver);
+#endif
 
 const int16_t minMeasuredValue     = -27315;
 const int16_t maxMeasuredValue     = 32766;
@@ -724,7 +731,13 @@ bool emberAfActionsClusterInstantActionCallback(app::CommandHandler * commandObj
     return true;
 }
 
-void ApplicationInit() {}
+void ApplicationInit()
+{
+#if CHIP_DEVICE_CONFIG_ENABLE_WPA
+    sWiFiNetworkCommissioningInstance.Init();
+#endif
+}
+
 
 const EmberAfDeviceType gBridgedOnOffDeviceTypes[] = { { DEVICE_TYPE_LO_ON_OFF_LIGHT, DEVICE_VERSION_DEFAULT },
                                                        { DEVICE_TYPE_BRIDGED_NODE, DEVICE_VERSION_DEFAULT } };
@@ -999,7 +1012,8 @@ int main(int argc, char * argv[])
     }
 
     // Run CHIP
-
+    
+    ApplicationInit();
     chip::DeviceLayer::PlatformMgr().RunEventLoop();
 
     return 0;
-- 
2.25.1

